<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="inc.lilin.crowd.database.OrderProjectPOMapper">
  <!-- ————————————————————————————————————————————————————————————————————————— -->
  <!--請注意，此文件由代碼產生器(MybatisGenerattor)產生，任何修改都會在下次產生代碼時被覆寫。-->
  <!-- ————————————————————————————————————————————————————————————————————————— -->
  <resultMap id="BaseResultMap" type="inc.lilin.crowd.entity.po.OrderProjectPO">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="project_name" jdbcType="CHAR" property="projectName" />
    <result column="launch_name" jdbcType="CHAR" property="launchName" />
    <result column="return_content" jdbcType="CHAR" property="returnContent" />
    <result column="return_count" jdbcType="INTEGER" property="returnCount" />
    <result column="support_price" jdbcType="INTEGER" property="supportPrice" />
    <result column="freight" jdbcType="INTEGER" property="freight" />
    <result column="order_id" jdbcType="INTEGER" property="orderId" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from t_order_project
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="inc.lilin.crowd.entity.po.OrderProjectPO">
    insert into t_order_project (id, project_name, launch_name, 
      return_content, return_count, support_price, 
      freight, order_id)
    values (#{id,jdbcType=INTEGER}, #{projectName,jdbcType=CHAR}, #{launchName,jdbcType=CHAR}, 
      #{returnContent,jdbcType=CHAR}, #{returnCount,jdbcType=INTEGER}, #{supportPrice,jdbcType=INTEGER}, 
      #{freight,jdbcType=INTEGER}, #{orderId,jdbcType=INTEGER})
  </insert>
  <update id="updateByPrimaryKey" parameterType="inc.lilin.crowd.entity.po.OrderProjectPO">
    update t_order_project
    set project_name = #{projectName,jdbcType=CHAR},
      launch_name = #{launchName,jdbcType=CHAR},
      return_content = #{returnContent,jdbcType=CHAR},
      return_count = #{returnCount,jdbcType=INTEGER},
      support_price = #{supportPrice,jdbcType=INTEGER},
      freight = #{freight,jdbcType=INTEGER},
      order_id = #{orderId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select id, project_name, launch_name, return_content, return_count, support_price, 
    freight, order_id
    from t_order_project
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select id, project_name, launch_name, return_content, return_count, support_price, 
    freight, order_id
    from t_order_project
  </select>
</mapper>