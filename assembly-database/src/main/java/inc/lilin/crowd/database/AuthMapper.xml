<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="inc.lilin.crowd.database.AuthMapper">
    <!-- ————————————————————————————————————————————————————————————————————————— -->
    <!--請注意，此文件由代碼產生器(MybatisGenerattor)產生，任何修改都會在下次產生代碼時被覆寫。-->
    <!-- ————————————————————————————————————————————————————————————————————————— -->
    <resultMap id="BaseResultMap" type="inc.lilin.crowd.entity.po.AuthPO">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="title" jdbcType="VARCHAR" property="title"/>
        <result column="category_id" jdbcType="INTEGER" property="categoryId"/>
    </resultMap>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from auth_t
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" parameterType="inc.lilin.crowd.entity.po.AuthPO">
        insert into auth_t (id, name, title,
                            category_id)
        values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{title,jdbcType=VARCHAR},
                #{categoryId,jdbcType=INTEGER})
    </insert>
    <update id="updateByPrimaryKey" parameterType="inc.lilin.crowd.entity.po.AuthPO">
        update auth_t
        set name        = #{name,jdbcType=VARCHAR},
            title       = #{title,jdbcType=VARCHAR},
            category_id = #{categoryId,jdbcType=INTEGER}
        where id = #{id,jdbcType=INTEGER}
    </update>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select id, name, title, category_id
        from auth_t
        where id = #{id,jdbcType=INTEGER}
    </select>
    <select id="selectAll" resultMap="BaseResultMap">
        select id, name, title, category_id
        from auth_t
    </select>

    <select id="selectAssignedAuthIdByRoleId" resultType="java.lang.Integer">
        select auth_id
        from inner_role_auth
        where role_id = #{roleId}
    </select>

    <delete id="deleteOldRelationship">
        delete
        from inner_role_auth
        where role_id = #{roleId}
    </delete>

    <insert id="insertNewRelationship">
        insert into inner_role_auth(auth_id, role_id) values
        <foreach collection="authIdList" item="authId"
                 separator=",">
            (#{authId}, #{roleId})
        </foreach>
    </insert>

    <select id="selectAssignedAuthNameByAdminId" resultType="java.lang.String">
        SELECT DISTINCT auth_t.name
        FROM auth_t
        LEFT JOIN inner_role_auth ON auth_t.id=inner_role_auth.auth_id
        LEFT JOIN inner_admin_role ON inner_admin_role.role_id=inner_role_auth.role_id
        WHERE inner_admin_role.admin_id=#{adminId} and auth_t.name != "" and auth_t.name is not null
    </select>
</mapper>